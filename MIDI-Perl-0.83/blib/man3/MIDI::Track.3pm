.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "MIDI::Track 3pm"
.TH MIDI::Track 3pm "2013-02-01" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MIDI::Track \-\- functions and methods for MIDI tracks
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 11
\& use MIDI; # ...which "use"s MIDI::Track et al
\& $taco_track = MIDI::Track\->new;
\& $taco_track\->events(
\&  [\*(Aqtext_event\*(Aq, 0, "I like tacos!"],
\&  [\*(Aqnote_on\*(Aq,    0, 4, 50, 96 ],
\&  [\*(Aqnote_off\*(Aq, 300, 4, 50, 96 ],
\& );
\& $opus = MIDI::Opus\->new(
\&  {  \*(Aqformat\*(Aq => 0,  \*(Aqticks\*(Aq => 240,  \*(Aqtracks\*(Aq => [ $taco_track ] }
\& );
\&   ...etc...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MIDI::Track provides a constructor and methods for objects
representing a \s-1MIDI\s0 track.  It is part of the \s-1MIDI\s0 suite.
.PP
\&\s-1MIDI\s0 tracks have, currently, three attributes: a type, events, and
data.  Almost all tracks you'll ever deal with are of type \*(L"MTrk\*(R", and
so this is the type by default.  Events are what make up an MTrk
track.  If a track is not of type MTrk, or is an unparsed MTrk, then
it has (or better have!) data.
.PP
When an MTrk track is encoded, if there is data defined for it, that's
what's encoded (and \*(L"encoding data\*(R" means just passing it thru
untouched).  Note that this happens even if the data defined is ""
(but it won't happen if the data is undef).  However, if there's no
data defined for the MTrk track (as is the general case), then the
track's events are encoded, via a call to \f(CW\*(C`MIDI::Event::encode\*(C'\fR.
.PP
(If neither events not data are defined, it acts as a zero-length
track.)
.PP
If a non-MTrk track is encoded, its data is encoded.  If there's no
data for it, it acts as a zero-length track.
.PP
In other words, 1) events are meaningful only in an MTrk track, 2) you
probably don't want both data and events defined, and 3) 99.999% of
the time, just worry about events in MTrk tracks, because that's all
you ever want to deal with anyway.
.SH "CONSTRUCTOR AND METHODS"
.IX Header "CONSTRUCTOR AND METHODS"
MIDI::Track provides...
.IP "the constructor MIDI::Track\->new({ ...options... })" 4
.IX Item "the constructor MIDI::Track->new({ ...options... })"
This returns a new track object.  By default, the track is of type
MTrk, which is probably what you want.  The options, which are
optional, is an anonymous hash.  There are four recognized options:
\&\f(CW\*(C`data\*(C'\fR, which sets the data of the new track to the string provided;
\&\f(CW\*(C`type\*(C'\fR, which sets the type of the new track to the string provided;
\&\f(CW\*(C`events\*(C'\fR, which sets the events of the new track to the contents of
the list-reference provided (i.e., a reference to a LoL \*(-- see
perllol for the skinny on LoLs); and \f(CW\*(C`events_r\*(C'\fR, which is an exact
synonym of \f(CW\*(C`events\*(C'\fR.
.ie n .IP "the method $new_track = $track\->copy" 4
.el .IP "the method \f(CW$new_track\fR = \f(CW$track\fR\->copy" 4
.IX Item "the method $new_track = $track->copy"
This duplicates the contents of the given track, and returns
the duplicate.  If you are unclear on why you may need this function,
consider:
.Sp
.Vb 2
\&          $funk  = MIDI::Opus\->new({\*(Aqfrom_file\*(Aq => \*(Aqfunk1.mid\*(Aq});
\&          $samba = MIDI::Opus\->new({\*(Aqfrom_file\*(Aq => \*(Aqsamba1.mid\*(Aq});
\&          
\&          $bass_track = ( $funk\->tracks )[\-1]; # last track
\&          push(@{ $samba\->tracks_r }, $bass_track );
\&               # make it the last track
\&          
\&          &funk_it_up(  ( $funk\->tracks )[\-1]  );
\&               # modifies the last track of $funk
\&          &turn_it_out(  ( $samba\->tracks )[\-1]  );
\&               # modifies the last track of $samba
\&          
\&          $funk\->write_to_file(\*(Aqfunk2.mid\*(Aq);
\&          $samba\->write_to_file(\*(Aqsamba2.mid\*(Aq);
\&          exit;
.Ve
.Sp
So you have your routines funk_it_up and turn_it_out, and they each
modify the track they're applied to in some way.  But the problem is that
the above code probably does not do what you want \*(-- because the last
track-object of \f(CW$funk\fR and the last track-object of \f(CW$samba\fR are the
\&\fIsame object\fR.  An object, you may be surprised to learn, can be in
different opuses at the same time \*(-- which is fine, except in cases like
the above code.  That's where you need to do copy the object.  Change
the above code to read:
.Sp
.Vb 1
\&          push(@{ $samba\->tracks_r }, $bass_track\->copy );
.Ve
.Sp
and what you want to happen, will.
.Sp
Incidentally, this potential need to copy also occurs with opuses (and
in fact any reference-based data structure, altho opuses and tracks
should cover almost all cases with \s-1MIDI\s0 stuff), which is why there's
\&\f(CW$opus\fR\->copy, for copying entire opuses.
.Sp
(If you happen to need to copy a single event, it's just \f(CW$new\fR = [@$old] ;
and if you happen to need to copy an event structure (LoL) outside of a
track for some reason, use MIDI::Event::copy_structure.)
.IP "track\->skyline({ ...options... })" 4
.IX Item "track->skyline({ ...options... })"
skylines the entire track.  Modifies the track.  See MIDI::Score for
documentation on skyline
.ie n .IP "the method $track\->events( @events )" 4
.el .IP "the method \f(CW$track\fR\->events( \f(CW@events\fR )" 4
.IX Item "the method $track->events( @events )"
Returns the list of events in the track, possibly after having set it
to \f(CW@events\fR, if specified and not empty.  (If you happen to want to set
the list of events to an empty list, for whatever reason, you have to use
\&\*(L"$track\->events_r([])\*(R".)
.Sp
In other words: \f(CW$track\fR\->events(@events) is how to set the list of events
(assuming \f(CW@events\fR is not empty), and \f(CW@events\fR = \f(CW$track\fR\->events is how to
read the list of events.
.ie n .IP "the method $track\->events_r( $event_r )" 4
.el .IP "the method \f(CW$track\fR\->events_r( \f(CW$event_r\fR )" 4
.IX Item "the method $track->events_r( $event_r )"
Returns a reference to the list of events in the track, possibly after
having set it to \f(CW$events_r\fR, if specified.  Actually, \*(L"$events_r\*(R" can be
any listref to a LoL, whether it comes from a scalar as in
\&\f(CW$some_events_r\fR, or from something like \f(CW\*(C`[@events]\*(C'\fR, or just plain
old \f(CW\*(C`\e@events\*(C'\fR
.Sp
Originally \f(CW$track\fR\->events was the only way to deal with events, but I
added \f(CW$track\fR\->events_r to make possible 1) setting the list of events
to (), for whatever that's worth, and 2) so you can directly
manipulate the track's events, without having to \fIcopy\fR the list of
events (which might be tens of thousands of elements long) back
and forth.  This way, you can say:
.Sp
.Vb 2
\&          $events_r = $track\->events_r();
\&          @some_stuff = splice(@$events_r, 4, 6);
.Ve
.Sp
But if you don't know how to deal with listrefs outside of LoLs,
that's \s-1OK,\s0 just use \f(CW$track\fR\->events.
.ie n .IP "the method $track\->type( 'MFoo' )" 4
.el .IP "the method \f(CW$track\fR\->type( 'MFoo' )" 4
.IX Item "the method $track->type( 'MFoo' )"
Returns the type of \f(CW$track\fR, after having set it to 'MFoo', if provided.
You probably won't ever need to use this method, other than in
a context like:
.Sp
.Vb 3
\&          if( $track\->type eq \*(AqMTrk\*(Aq ) { # The usual case
\&            give_up_the_funk($track);
\&          } # Else just keep on walkin\*(Aq!
.Ve
.Sp
Track types must be 4 bytes long; see MIDI::Filespec for details.
.ie n .IP "the method $track\->data( $kooky_binary_data )" 4
.el .IP "the method \f(CW$track\fR\->data( \f(CW$kooky_binary_data\fR )" 4
.IX Item "the method $track->data( $kooky_binary_data )"
Returns the data from \f(CW$track\fR, after having set it to
\&\f(CW$kooky_binary_data\fR, if provided \*(-- even if it's zero-length!  You
probably won't ever need to use this method.  For your information,
\&\f(CW$track\fR\->data(undef) is how to undefine the data for a track.
.ie n .IP "the method $track\->new_event('event', ...parameters... )" 4
.el .IP "the method \f(CW$track\fR\->new_event('event', ...parameters... )" 4
.IX Item "the method $track->new_event('event', ...parameters... )"
This adds the event ('event', ...parameters...) to the end of the
event list for \f(CW$track\fR.  It's just sugar for:
.Sp
.Vb 1
\&          push( @{$this_track\->events_r}, [ \*(Aqevent\*(Aq, ...params... ] )
.Ve
.Sp
If you want anything other than the equivalent of that, like some
kinda \fBsplice()\fR, then do it yourself with \f(CW$track\fR\->events_r or
\&\f(CW$track\fR\->events.
.ie n .IP "the method $track\->dump({ ...options... })" 4
.el .IP "the method \f(CW$track\fR\->dump({ ...options... })" 4
.IX Item "the method $track->dump({ ...options... })"
This dumps the track's contents for your inspection.  The dump format
is code that looks like Perl code that you'd use to recreate that track.
This routine outputs with just \f(CW\*(C`print\*(C'\fR, so you can use \f(CW\*(C`select\*(C'\fR to
change where that'll go.  I intended this to be just an internal
routine for use only by the method MIDI::Opus::dump, but I figure it
might be useful to you, if you need to dump the code for just a given
track.
Read the source if you really need to know how this works.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1998\-2002 Sean M. Burke. All rights reserved.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sean M. Burke \f(CW\*(C`sburke@cpan.org\*(C'\fR (until 2010)
.PP
Darrell Conklin \f(CW\*(C`conklin@cpan.org\*(C'\fR (from 2010)
